%{

/*
Author:         ZhangYin, zhangyin2018@iscas.ac.cn
Version:        1.0.1
Date:           June 28, 2019
Description:    Tiger compiler chap4, Abstract Syntax of TIGER in Yacc
 */

#include <stdio.h>
#include "util.h"
#include "symbol.h"
#include "errormsg.h"
#include "absyn.h"

int yylex(void); /* function prototype */

A_exp absyn_root;

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	A_var var;
	A_exp exp;
	A_dec dec;
	A_ty ty;
    A_decList decList;
    A_expList expList;
    A_field field;
    A_fieldList fieldList;
    A_fundec fundec;
    A_fundecList fundecList;
    A_namety namety;
	A_nametyList nametyList;
	A_efield efield;
	A_efieldList efieldList;
    }

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%type <var> lvalue
%type <exp> exp program functioncall recordcreation arraycreation arithmatic comparison
%type <dec> dec vardec
%type <ty> ty
%type <decList> decs
%type <expList> explist expseq
%type <fieldList> tyfields
%type <fundec> fundec
%type <namety> tydec
%type <efieldList> fieldassignmentlist

%start program

%nonassoc DO OF
%nonassoc THEN
%nonassoc ELSE
%right SEMICOLON
%right ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ GT LT GE LE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS


%%

program
	: exp    	{absyn_root=$1;}

decs
    : dec 		{$$ = A_DecList($1, NULL);}
    | decs dec 	{$$ = A_DecList($2, $1);}

dec
    : tydec		{$$ = A_TypeDec(EM_tokPos, A_NametyList($1, NULL));}
    | vardec	{$$ = $1;}
    | fundec 	{$$ = A_FunctionDec(EM_tokPos, A_FundecList($1, NULL));}

tydec
    : TYPE ID EQ ty 	{$$ = A_Namety(S_Symbol($2), $4);}

ty
    : ID 						{$$ = A_NameTy(EM_tokPos, S_Symbol($1));}
    | LBRACE tyfields RBRACE	{$$ = A_RecordTy(EM_tokPos, $2);}
    | ARRAY OF ID 				{$$ = A_ArrayTy(EM_tokPos, S_Symbol($3));}

tyfields
    : 								{$$ = NULL;}
    | ID COLON ID 					{$$ = A_FieldList(A_Field(EM_tokPos, S_Symbol($1), S_Symbol($3)), NULL);}
    | tyfields COMMA ID COLON ID 	{$$ = A_FieldList(A_Field(EM_tokPos, S_Symbol($3), S_Symbol($5)), $1);}

vardec
    : VAR ID ASSIGN exp 			{$$ = A_VarDec(EM_tokPos, S_Symbol($2), NULL, $4);}
    | VAR ID COLON ID ASSIGN exp 	{$$ = A_VarDec(EM_tokPos, S_Symbol($2), S_Symbol($4), $6);}

fundec
    : FUNCTION ID LPAREN tyfields RPAREN EQ exp 			{$$ = A_Fundec(EM_tokPos, S_Symbol($2), $4, NULL, $7);}
    | FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp 	{$$ = A_Fundec(EM_tokPos, S_Symbol($2), $4, S_Symbol($7), $9);} 		


exp
    : lvalue								{$$ = A_VarExp(EM_tokPos, $1);}
    | NIL 									{$$ = A_NilExp(EM_tokPos);}
    | INT 									{$$ = A_IntExp(EM_tokPos, $1);}
    | MINUS exp    %prec UMINUS 			{$$ = A_OpExp(EM_tokPos, A_minusOp, A_IntExp(EM_tokPos, 0), $2);}
    | STRING 								{$$ = A_StringExp(EM_tokPos, $1);}
    | LPAREN expseq RPAREN 					{$$ = A_SeqExp(EM_tokPos, $2);}
    | functioncall 							{$$ = $1;}
    | arithmatic 							{$$ = $1;}
    | comparison 							{$$ = $1;}
    | exp AND exp 							{A_IfExp(EM_tokPos, $1, $3, A_IntExp(EM_tokPos, 0));}
    | exp OR exp 							{A_IfExp(EM_tokPos, $1, A_IntExp(EM_tokPos, 1), $3);}
    | recordcreation 						{$$ = $1;}
    | arraycreation 						{$$ = $1;}
    | lvalue ASSIGN exp 					{$$ = A_AssignExp(EM_tokPos, $1, $3);}
    | IF exp THEN exp ELSE exp 				{$$ = A_IfExp(EM_tokPos, $2, $4, $6);}
    | IF exp THEN exp 						{$$ = A_IfExp(EM_tokPos, $2, $4, NULL);}
    | WHILE exp DO exp 						{$$ = A_WhileExp(EM_tokPos, $2, $4);}
    | FOR ID ASSIGN exp TO exp DO exp 		{$$ = A_ForExp(EM_tokPos, S_Symbol($2), $4, $6, $8);}
    | BREAK 								{$$ = A_BreakExp(EM_tokPos);}
    | LET decs IN expseq END 				{$$ = A_LetExp(EM_tokPos, $2, A_SeqExp(EM_tokPos, $4)); }

lvalue
    : ID 							{$$ = A_SimpleVar(EM_tokPos, S_Symbol($1));}
    | lvalue DOT ID 				{$$ = A_FieldVar(EM_tokPos, $1, S_Symbol($3));}
    | lvalue LBRACK exp RBRACK 		{$$ = A_SubscriptVar(EM_tokPos, $1, $3);}
    | ID LBRACK exp RBRACK 			{$$ = A_SubscriptVar(EM_tokPos, A_SimpleVar(EM_tokPos, S_Symbol($1)), $3);}

expseq
    :                           {$$ = NULL;}
    | exp                       {$$ = A_ExpList($1, NULL);}
    | expseq SEMICOLON exp      {$$ = A_ExpList($3, $1);}

functioncall
    : ID LPAREN explist RPAREN  {$$ = A_CallExp(EM_tokPos, S_Symbol($1), $3);}


explist
    :                       {$$ = NULL;}
    | exp                   {$$ = A_ExpList($1, NULL);}
    | explist COMMA exp     {$$ = A_ExpList($3, $1);}

arithmatic
    : exp PLUS exp          {$$ = A_OpExp(EM_tokPos, A_plusOp, $1, $3);}
    | exp MINUS exp         {$$ = A_OpExp(EM_tokPos, A_minusOp, $1, $3);}
    | exp TIMES exp         {$$ = A_OpExp(EM_tokPos, A_timesOp, $1, $3);}
    | exp DIVIDE exp        {$$ = A_OpExp(EM_tokPos, A_divideOp, $1, $3);}

comparison
    : exp EQ exp            {$$ = A_OpExp(EM_tokPos, A_eqOp, $1, $3);}
    | exp NEQ exp           {$$ = A_OpExp(EM_tokPos, A_neqOp, $1, $3);}
    | exp LT exp            {$$ = A_OpExp(EM_tokPos, A_ltOp, $1, $3);}
    | exp LE exp            {$$ = A_OpExp(EM_tokPos, A_leOp, $1, $3);}
    | exp GT exp            {$$ = A_OpExp(EM_tokPos, A_gtOp, $1, $3);}
    | exp GE exp            {$$ = A_OpExp(EM_tokPos, A_geOp, $1, $3);}

recordcreation
    : ID LBRACE fieldassignmentlist RBRACE  {$$ = A_RecordExp(EM_tokPos, S_Symbol($1), $3);}

fieldassignmentlist
    :                                       {$$ = NULL;}
    | ID EQ exp                             {$$ = A_EfieldList(A_Efield(S_Symbol($1), $3), NULL);}
    | fieldassignmentlist COMMA ID EQ exp   {$$ = A_EfieldList(A_Efield(S_Symbol($3), $5), $1);}

arraycreation
    : ID LBRACK exp RBRACK OF exp           {$$ = A_ArrayExp(EM_tokPos, S_Symbol($1), $3, $6);}




	
